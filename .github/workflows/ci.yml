name: Java Spring Boot CI

on:
  push:
    branches:
      - dev # always push to dev first
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # Add PostgreSQL service with secrets
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME || 'wardrobe_test' }}
          POSTGRES_USER: ${{ secrets.TEST_DB_USER || 'postgres' }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD || 'postgres' }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: Verify Maven wrapper is working
        run: ./mvnw --version

      # Create application-test.properties for CI environment using secrets
      - name: Create test properties
        run: |
          mkdir -p src/test/resources
          cat > src/test/resources/application-test.properties << EOF
          spring.datasource.url=jdbc:postgresql://localhost:5432/${{ secrets.TEST_DB_NAME || 'wardrobe_test' }}
          spring.datasource.username=${{ secrets.TEST_DB_USER || 'postgres' }}
          spring.datasource.password=${{ secrets.TEST_DB_PASSWORD || 'postgres' }}
          spring.datasource.driver-class-name=org.postgresql.Driver
          spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.jpa.show-sql=true
          EOF

      # Set the active profile to test
      - name: Build with Maven
        run: mvn clean package -DskipTests -Dspring.profiles.active=test

      - name: List target directory
        run: ls -la target/
        continue-on-error: true

      - name: Run tests
        run: mvn test -Dspring.profiles.active=test

      - name: List surefire reports directory
        run: ls -la target/surefire-reports/
        continue-on-error: true

      - name: Generate test reports
        if: always()
        run: mvn surefire-report:report-only
        continue-on-error: true

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            target/surefire-reports/**
            target/site/**
          if-no-files-found: warn

  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      # Only run code quality checks if the plugins are configured
      - name: Check if checkstyle plugin exists
        id: check-checkstyle
        run: |
          if grep -q "maven-checkstyle-plugin" pom.xml; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run checkstyle
        if: steps.check-checkstyle.outputs.exists == 'true'
        run: mvn checkstyle:check
        continue-on-error: true

      - name: Check if spotbugs plugin exists
        id: check-spotbugs
        run: |
          if grep -q "spotbugs-maven-plugin" pom.xml; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run SpotBugs
        if: steps.check-spotbugs.outputs.exists == 'true'
        run: mvn spotbugs:check
        continue-on-error: true

      - name: Check if sonar plugin exists
        id: check-sonar
        run: |
          if grep -q "sonar-maven-plugin" pom.xml; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: SonarQube Scan
        if: github.event_name != 'pull_request' && steps.check-sonar.outputs.exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn sonar:sonar -Dsonar.projectKey=wardrobe-social-app -Dsonar.organization=your-organization
        continue-on-error: true
